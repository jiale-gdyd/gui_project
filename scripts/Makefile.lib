# 向后兼容性
asflags-y  += $(EXTRA_AFLAGS)
ccflags-y  += $(EXTRA_CFLAGS)
cppflags-y += $(EXTRA_CPPFLAGS)
cxxflags-y += $(EXTRA_CXXFLAGS)
ldflags-y  += $(EXTRA_LDFLAGS)

#
# 在子目录中生效的标志
export KBUILD_SUBDIR_ASFLAGS  := $(KBUILD_SUBDIR_ASFLAGS) $(subdir-asflags-y)
export KBUILD_SUBDIR_CCFLAGS  := $(KBUILD_SUBDIR_CCFLAGS) $(subdir-ccflags-y)
export KBUILD_SUBDIR_CXXFLAGS := $(KBUILD_SUBDIR_CXXFLAGS) $(subdir-cxxflags-y)

# 从各种变量中找出我们需要构建什么
# ===========================================================================

# 库总是收集在一个lib文件中
# 筛选出已内置的对象

lib-y := $(filter-out $(obj-y), $(sort $(lib-y)))


# 处理子目录中的对象
# ---------------------------------------------------------------------------
# o 如果我们在$(obj-y)遇到foo/，则用foo/build-in.o替换它，并将目录添加到目录列表中，以下降到: $(subdir-y)
# o 如果在$(obj-m)中遇到foo/，则将其从$(obj-m)中删除，并将目录添加到要下放到的目录列表中: $(subdir-m)

__subdir-y	:= $(patsubst %/,%,$(filter %/, $(obj-y)))
subdir-y	+= $(__subdir-y)
obj-y		:= $(patsubst %/, %/built-in.o, $(obj-y))

# 需要下放到的子目录

subdir-ym	:= $(sort $(subdir-y))

# $(subdir-obj-y)是$(obj-y)中使用dir/命令kbuild下降的对象列表
subdir-obj-y := $(filter %/built-in.o, $(obj-y))

# $(obj-dirs)是包含对象文件的目录列表
obj-dirs := $(dir $(subdir-obj-y))

# 用单个部分替换多部分对象，只查看本地目录
real-objs-y := $(foreach m, $(filter-out $(subdir-obj-y), $(obj-y)), $(if $(strip $($(m:.o=-objs)) $($(m:.o=-y))),$($(m:.o=-objs)) $($(m:.o=-y)),$(m))) $(extra-y)

# 增加子路径

extra-y		:= $(addprefix $(obj)/,$(extra-y))
always		:= $(addprefix $(obj)/,$(always))
targets		:= $(addprefix $(obj)/,$(targets))
obj-y		:= $(addprefix $(obj)/,$(obj-y))
lib-y		:= $(addprefix $(obj)/,$(lib-y))
subdir-obj-y	:= $(addprefix $(obj)/,$(subdir-obj-y))
real-objs-y	:= $(addprefix $(obj)/,$(real-objs-y))
subdir-ym	:= $(addprefix $(obj)/,$(subdir-ym))
obj-dirs	:= $(addprefix $(obj)/,$(obj-dirs))

orig_c_flags   = $(KBUILD_CPPFLAGS) $(KBUILD_CFLAGS) $(KBUILD_SUBDIR_CCFLAGS) \
                 $(ccflags-y) $(CFLAGS_$(basetarget).o)
_c_flags       = $(filter-out $(CFLAGS_REMOVE_$(basetarget).o), $(orig_c_flags))
_a_flags       = $(KBUILD_CPPFLAGS) $(KBUILD_AFLAGS) $(KBUILD_SUBDIR_ASFLAGS) \
                 $(asflags-y) $(AFLAGS_$(basetarget).o)
_cpp_flags     = $(KBUILD_CPPFLAGS) $(cppflags-y) $(CPPFLAGS_$(@F))
_cxx_flags     = $(KBUILD_CXXFLAGS) $(cxxflags-y) $(CXXFLAGS_$(@F))

# 如果在单独的objtree中构建内核，请将-Idir的所有引用扩展到-I$(srctree)/dir，绝对路径除外(以'/'开头)

ifeq ($(KBUILD_SRC),)
__c_flags		= $(_c_flags)
__a_flags		= $(_a_flags)
__cpp_flags     = $(_cpp_flags)
__cxx_flags     = $(_cxx_flags)
else

# -I$(obj) 定位生成的.h文件
# $(call addtree,-I$(obj))从生成的.c文件中查找srctree中的.h文件，并查找生成的.h文件
# FIXME: 用makefile中的特定CFLAGS*语句替换两者
__c_flags		= $(call addtree,-I$(obj)) $(call flags,_c_flags)
__a_flags		=                          $(call flags,_a_flags)
__cpp_flags     =                          $(call flags,_cpp_flags)
__cxx_flags     =                          $(call flags,_cxx_flags)
endif

c_flags        = -Wp,-MD,$(depfile) $(NOSTDINC_FLAGS) $(LINUXINCLUDE)     \
		 $(__c_flags) $(modkern_cflags)

a_flags        = -Wp,-MD,$(depfile) $(NOSTDINC_FLAGS) $(LINUXINCLUDE)     \
		 $(__a_flags) $(modkern_aflags)

cpp_flags      = -Wp,-MD,$(depfile) $(NOSTDINC_FLAGS) $(LINUXINCLUDE)     \
		 $(__cpp_flags)

cxx_flags      = -Wp,-MD,$(depfile) $(NOSTDINC_FLAGS) $(LINUXINCLUDE)     \
		 $(__cxx_flags) $(modkern_cxxflags)

ld_flags       = $(LDFLAGS) $(ldflags-y)

# 已传送的文件
# ===========================================================================

quiet_cmd_shipped = SHIPPED $@
cmd_shipped = cat $< > $@

$(obj)/%:: $(src)/%_shipped
	$(call cmd,shipped)

# 用于生成启动映像的命令e
# ===========================================================================
# 
#	使用如下:
#
#	target: source(s) FORCE
#		$(if_changed,ld/objcopy/gzip)
#
#	并将target添加到extra-y以便我们知道必须在保存的命令行中读取

# 链接
# ---------------------------------------------------------------------------

quiet_cmd_ld = LD      $@
cmd_ld = $(LD) $(LDFLAGS) $(ldflags-y) $(LDFLAGS_$(@F)) \
	       $(filter-out FORCE,$^) -o $@ 

# Objcopy
# ---------------------------------------------------------------------------

quiet_cmd_objcopy = OBJCOPY $@
cmd_objcopy = $(OBJCOPY) $(OBJCOPYFLAGS) $(OBJCOPYFLAGS_$(@F)) $< $@

# Gzip
# ---------------------------------------------------------------------------

quiet_cmd_gzip = GZIP    $@
cmd_gzip = (cat $(filter-out FORCE,$^) | gzip -n -f -9 > $@) || \
	(rm -f $@ ; false)

# Bzip2
# ---------------------------------------------------------------------------

# bzip2和lzma不包括文件大小…所以我们不得不假装；像gzip那样将大小附加为32位littleendian数字
size_append = printf $(shell						\
dec_size=0;								\
for F in $1; do								\
	fsize=$$(stat -c "%s" $$F);					\
	dec_size=$$(expr $$dec_size + $$fsize);				\
done;									\
printf "%08x\n" $$dec_size |						\
	sed 's/\(..\)/\1 /g' | {					\
		read ch0 ch1 ch2 ch3;					\
		for ch in $$ch3 $$ch2 $$ch1 $$ch0; do			\
			printf '%s%03o' '\\' $$((0x$$ch)); 		\
		done;							\
	}								\
)

quiet_cmd_bzip2 = BZIP2   $@
cmd_bzip2 = (cat $(filter-out FORCE,$^) | \
	bzip2 -9 && $(call size_append, $(filter-out FORCE,$^))) > $@ || \
	(rm -f $@ ; false)

# Lzma
# ---------------------------------------------------------------------------

quiet_cmd_lzma = LZMA    $@
cmd_lzma = (cat $(filter-out FORCE,$^) | \
	lzma -9 && $(call size_append, $(filter-out FORCE,$^))) > $@ || \
	(rm -f $@ ; false)

quiet_cmd_lzo = LZO     $@
cmd_lzo = (cat $(filter-out FORCE,$^) | \
	lzop -9 && $(call size_append, $(filter-out FORCE,$^))) > $@ || \
	(rm -f $@ ; false)

# XZ
# ---------------------------------------------------------------------------
# 使用xzkern压缩内核图像，xzmisc压缩其他内容
#
# XZKERN使用一个大的LZMA2字典，因为它不会增加内核解压缩程序的内存使用。如果目标体系结构可用，则使用bcj筛选器。
# xzkern还使用size_append附加未压缩的数据大小。.xz格式在文件末尾也有可用的大小信息，但格式更复杂，最好避免更改引导代码中读取未压缩大小的部分。
# 请注意，按size_append添加的字节将使xz工具认为文件已损坏。这是意料之中的
#
# xzmisc不使用size_append，因此它可以用于创建普通的.xz文件。
# xzmisc使用的lzma2字典比xzkern小，因为在多调用解压模式下，一个非常大的字典会增加太多的内存使用。也不使用bcj过滤器。
quiet_cmd_xzkern = XZKERN  $@
cmd_xzkern = (cat $(filter-out FORCE,$^) | \
	sh $(srctree)/scripts/xz_wrap.sh && \
	$(call size_append, $(filter-out FORCE,$^))) > $@ || \
	(rm -f $@ ; false)

quiet_cmd_xzmisc = XZMISC  $@
cmd_xzmisc = (cat $(filter-out FORCE,$^) | \
	xz --check=crc32 --lzma2=dict=1MiB) > $@ || \
	(rm -f $@ ; false)

# 杂项材料
# ---------------------------------------------------------------------------
quote:="
