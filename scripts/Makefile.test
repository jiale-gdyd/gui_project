# ==========================================================================
# 在系统上构建二进制文件
# 二进制文件用于编译内核，例如预处理数据文件
#
# C和C++都支持，但首选语言是C这样的实用程序
#
# 简单语法
# testprogs-y := bin2hex
# 将编译bin2hex.c并创建一个名为bin2hex的可执行文件
#
# hostprogs-y    := lxdialog
# lxdialog-objs := checklist.o lxdialog.o
# 将编译lxdialog.c和checklist.c，然后基于checklist.o和lxdialog.o链接可执行的lxdialog
#
# testprogs-y      := qconf
# qconf-cxxobjs   := qconf.o
# qconf-objs      := menu.o
# 将qconf编译为C++程序，并将菜单作为C程序
# 它们作为c++代码链接到可执行的qconf

# testprogs-y := conf
# conf-objs  := conf.o libkconfig.so
# libkconfig-objs := expr.o type.o
# 将创建一个名为libkconfig.so的共享库，该库由expr.o和type.o组成(它们都编译为C代码，而对象文件则作为独立于位置的代码)
# conf.c作为一个c程序编译，conf.o与libkconfig.so作为可执行的conf
# 注意: 不支持由C++文件组成的共享库

__testprogs := $(sort $(testprogs-y))

# C代码
# 可从单个C文件中执行
test-csingle	:= $(foreach m,$(__testprogs),$(if $($(m)-objs),,$(m)))

# 基于多个.o文件链接的C可执行文件
test-cmulti	:= $(foreach m,$(__testprogs),\
		   $(if $($(m)-cxxobjs),,$(if $($(m)-objs),$(m))))

# 从.c文件编译的对象(.o)文件
test-cobjs	:= $(sort $(foreach m,$(__testprogs),$($(m)-objs)))

# C++代码
# C++可执行文件编译至少从.cc文件和零或更多.c文件
test-cxxmulti	:= $(foreach m,$(__testprogs),$(if $($(m)-cxxobjs),$(m)))

# 从.cc文件编译的对象(.o)文件
test-cxxobjs	:= $(sort $(foreach m,$(test-cxxmulti),$($(m)-cxxobjs)))

# 共享库(仅支持.c)
# Shared libraries (.so) - all .so files referenced in "xxx-objs"
# 共享库(.so) - "xxx-objs"中引用的所有.so文件
test-cshlib	:= $(sort $(filter %.so, $(test-cobjs)))
# 从"xxx-objs"中删除.so文件
test-cobjs	:= $(filter-out %.so,$(test-cobjs))

# 共享库使用的对象(.o)文件
test-cshobjs	:= $(sort $(foreach m,$(test-cshlib),$($(m:.so=-objs))))

# programs/.o文件的输出目录
# testprogs-y:= tools/build可能已指定。检索目录
test-objdirs := $(foreach f,$(__testprogs), $(if $(dir $(f)),$(dir $(f))))
# prog-objs表示法中的.o文件目录
test-objdirs += $(foreach f,$(test-cmulti),                  \
                    $(foreach m,$($(f)-objs),                \
                        $(if $(dir $(m)),$(dir $(m)))))
# prog-cxxobjs表示法中的.o文件目录
test-objdirs += $(foreach f,$(test-cxxmulti),                  \
                    $(foreach m,$($(f)-cxxobjs),                \
                        $(if $(dir $(m)),$(dir $(m)))))

test-objdirs := $(strip $(sort $(filter-out ./,$(test-objdirs))))


__testprogs     := $(addprefix $(obj)/,$(__testprogs))
test-csingle	:= $(addprefix $(obj)/,$(test-csingle))
test-cmulti		:= $(addprefix $(obj)/,$(test-cmulti))
test-cobjs		:= $(addprefix $(obj)/,$(test-cobjs))
test-cxxmulti	:= $(addprefix $(obj)/,$(test-cxxmulti))
test-cxxobjs	:= $(addprefix $(obj)/,$(test-cxxobjs))
test-cshlib		:= $(addprefix $(obj)/,$(test-cshlib))
test-cshobjs	:= $(addprefix $(obj)/,$(test-cshobjs))
test-objdirs    := $(addprefix $(obj)/,$(test-objdirs))

obj-dirs += $(test-objdirs)

#####
# 处理gcc的选项。支持用单独的输出目录构建

_testc_flags   = $(KBUILD_CFLAGS)   $(KBUILD_EXTRACFLAGS)   \
                 $(KBUILD_CFLAGS_$(basetarget).o)
_testcxx_flags = $(KBUILD_CXXFLAGS) $(KBUILD_EXTRACXXFLAGS) \
                 $(KBUILD_CXXFLAGS_$(basetarget).o)

ifeq ($(KBUILD_SRC),)
__testc_flags	= $(_testc_flags)
__testcxx_flags	= $(_testcxx_flags)
else
__testc_flags	= -I$(obj) $(call flags,_testc_flags)
__testcxx_flags	= -I$(obj) $(call flags,_testcxx_flags)
endif

testc_flags    = -Wp,-MD,$(depfile) $(__testc_flags)
testcxx_flags  = -Wp,-MD,$(depfile) $(__testcxx_flags)

#####
# 在主机上编译程序

# 从单个.c文件创建可执行文件
# test-csingle -> Executable
quiet_cmd_test-csingle 	= CC  $@
      cmd_test-csingle	= $(CC) $(testc_flags) -o $@ $< \
	  	$(TEST_LOADLIBES) $(TESTLOADLIBES_$(@F))
$(test-csingle): $(obj)/%: $(src)/%.c FORCE
	$(call if_changed_dep,test-csingle)

# 基于.o文件列表链接可执行文件，所有文件都是纯c
# test-cmulti -> executable
quiet_cmd_test-cmulti	= LD  $@
      cmd_test-cmulti	= $(CC) $(KBUILD_LDFLAGS) -o $@ \
			  $(addprefix $(obj)/,$($(@F)-objs)) \
			  $(TEST_LOADLIBES) $(TESTLOADLIBES_$(@F))
$(test-cmulti): $(obj)/%: $(test-cobjs) $(test-cshlib) FORCE
	$(call if_changed,test-cmulti)

# 从单个.c文件创建.o文件
# test-cobjs -> .o
quiet_cmd_test-cobjs	= CC  $@
      cmd_test-cobjs	= $(CC) $(testc_flags) -c -o $@ $<
$(test-cobjs): $(obj)/%.o: $(src)/%.c FORCE
	$(call if_changed_dep,test-cobjs)

# 基于.o文件列表链接可执行文件，.c和.cc的混合
# test-cxxmulti -> executable
quiet_cmd_test-cxxmulti	= LD  $@
      cmd_test-cxxmulti	= $(CXX) $(KBUILD_LDFLAGS) -o $@ \
			  $(foreach o,objs cxxobjs,\
			  $(addprefix $(obj)/,$($(@F)-$(o)))) \
			  $(TEST_LOADLIBES) $(TESTLOADLIBES_$(@F))
$(test-cxxmulti): $(obj)/%: $(test-cobjs) $(test-cxxobjs) $(test-cshlib) FORCE
	$(call if_changed,test-cxxmulti)

# C从一个.cc(C++)文件创建.o文件
quiet_cmd_test-cxxobjs	= CXX $@
      cmd_test-cxxobjs	= $(CXX) $(testcxx_flags) -c -o $@ $<
$(test-cxxobjs): $(obj)/%.o: $(src)/%.cc FORCE
	$(call if_changed_dep,test-cxxobjs)

# 编译.c文件，创建独立于位置的.o文件
# test-cshobjs -> .o
quiet_cmd_test-cshobjs	= CC  -fPIC $@
      cmd_test-cshobjs	= $(CC) $(testc_flags) -fPIC -c -o $@ $<
$(test-cshobjs): $(obj)/%.o: $(src)/%.c FORCE
	$(call if_changed_dep,test-cshobjs)

# 基于位置无关的.o文件链接共享库
# *.o -> .so shared library (test-cshlib)
quiet_cmd_test-cshlib	= LLD -shared $@
      cmd_test-cshlib	= $(CC) $(KBUILD_LDFLAGS) -shared -o $@ \
			  $(addprefix $(obj)/,$($(@F:.so=-objs))) \
			  $(TEST_LOADLIBES) $(TESTLOADLIBES_$(@F))
$(test-cshlib): $(obj)/%: $(test-cshobjs) FORCE
	$(call if_changed,test-cshlib)

targets += $(test-csingle)  $(test-cmulti) $(test-cobjs)\
	   $(test-cxxmulti) $(test-cxxobjs) $(test-cshlib) $(test-cshobjs) 

